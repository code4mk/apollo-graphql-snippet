{
    "apollo__client": {
        "prefix": "ap_client",
        "body": [
          "import { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client';",
          "import { setContext } from '@apollo/client/link/context';",
          "",
          "const BASE_URI = 'http://127.0.0.1/gql'",
          "const token = 'your token'",
          "",
          "const httpLink = createHttpLink({",
          "  uri: BASE_URI",
          "});",
          "",
          "const authLink = setContext((_, { headers }) => {",
          "  return {",
          "    headers: {",
          "      ...headers,",
          "      authorization: token ? `Bearer ${token}` : \"\",",
          "    }",
          "  }",
          "});",
          "",
          "const Client = new ApolloClient({",
          "  link: authLink.concat(httpLink),",
          "  cache: new InMemoryCache()",
          "});",
          "",
          "export{",
          "  Client",
          "}"
        ],
        "description": "apollo__client"
    },
    "apollo__lazy_query": {
      "prefix": "ap_lazy",
      "body": [
        "    const YOUR_QUERY = gql`",
        "    query OpertionName {",
        "        ",
        "    }",
        "    `",
        "    const [ YourAction, {} ] = useLazyQuery(YOUR_QUERY,{",
        "        onCompleted(res){",
        "            // do someting",
        "        },",
        "        onError(error){",
        "            // do something",
        "        }",
        "    })"
      ],
      "description": "apollo__lazy_query"
    },
    "apollo__mutation": {
      "prefix": "ap_mutation",
      "body": [
        "    const YOUR_QUERY = gql`",
        "    your mutation",
        "    `",
        "    const [ YourAction, {} ] = useMutation(YOUR_QUERY,{",
        "        onCompleted(res){",
        "            // do someting",
        "        },",
        "        onError(error){",
        "            // do something",
        "        }",
        "    })"
      ],
      "description": "apollo__mutation"
    }
}